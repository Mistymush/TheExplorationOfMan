/**
 * @author August Beers
 * 
 * I used window builder to layout my interface and then refactored 
 * the code generated by this tool to be more readable.
 * 
 * I also used the Java API. Some pages included:
 * https://docs.oracle.com/javase/7/docs/api/javax/swing/JList.html
 * https://docs.oracle.com/javase/7/docs/api/java/awt/event/MouseAdapter.html
 */

import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JLabel;
import java.awt.BorderLayout;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import javax.swing.JTextField;
import javax.swing.ListModel;

import java.awt.Insets;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import net.miginfocom.swing.MigLayout;
import javax.swing.JButton;
import javax.swing.JList;
import javax.swing.AbstractListModel;
import javax.swing.JTextArea;

public class MANGUI {

	private JFrame frmTheExplorationOfMAN;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					MANGUI window = new MANGUI();
					window.frmTheExplorationOfMAN.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public MANGUI() {
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		
		/**
		 * Create a JFrame to hold the GUI.
		 */
		frmTheExplorationOfMAN = new JFrame();
		frmTheExplorationOfMAN.setTitle("The Exploration of MAN: A Linux Help System");
		frmTheExplorationOfMAN.setBounds(100, 100, 600, 600);
		frmTheExplorationOfMAN.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frmTheExplorationOfMAN.getContentPane().setLayout(new MigLayout("", "[83.00][][33][grow]", "[][][grow]"));
		
		/**
		 * Non Functional Search Field and Search button.
		 */
		JTextField searchField = new JTextField();
		frmTheExplorationOfMAN.getContentPane().add(searchField, "flowx,cell 0 0,alignx left");
		searchField.setColumns(10);
		
		JButton btnSearch = new JButton("Search");
		frmTheExplorationOfMAN.getContentPane().add(btnSearch, "cell 1 0");
		
		/**
		 * Non Functional Buttons for back and forward (undo/redo)
		 */
		JButton btnBack = new JButton("Back");
		frmTheExplorationOfMAN.getContentPane().add(btnBack, "flowx,cell 3 1");
		
		JButton btnForward = new JButton("Forward");
		frmTheExplorationOfMAN.getContentPane().add(btnForward, "cell 3 1");
		
		/**
		 * list Labels.
		 */
		JLabel lblContents = new JLabel("Contents:");
		frmTheExplorationOfMAN.getContentPane().add(lblContents, "flowx,cell 0 1,growx");
		
		JLabel lblCommands = new JLabel("Commands:");
		frmTheExplorationOfMAN.getContentPane().add(lblCommands, "cell 1 1,growx");
		
		/**
		 * listModel
		 * Class which defines the state of the lists in the interface.
		 *
		 */
		class listModel extends AbstractListModel<String>{
			String[] values;
			
			listModel(String[] values){
				this.values = values;
			}
			
			@Override
			public String getElementAt(int index) {
				return values[index];
			}

			@Override
			public int getSize() {
				return values.length;
			}
		}
		
		/**
		 * categoryList
		 * Represents the top level of the help hierarchy, containing categories of commands.
		 */
		JList<String> categoryList = new JList<String>();
		categoryList.setModel(new listModel(new String[] {"Sytem", "Directories", "Files"}));
		frmTheExplorationOfMAN.getContentPane().add(categoryList, "flowx,cell 0 2,grow");
		
		/**
		 * cmdList
		 * Represents the second level of the help hierarchy, containing actual commands.
		 */
		JList<String> cmdList = new JList<String>();
		cmdList.setModel(new listModel(new String[] {"cd", "ls", "mkdir", "rmdir"}));
		frmTheExplorationOfMAN.getContentPane().add(cmdList, "cell 1 2,grow");
		
		/**
		 * helpTextArea
		 * Text Area to display XML help data.
		 */
		JTextArea helpTextArea = new JTextArea();
		helpTextArea.setText("Welcome to the exploration of MAN");
		helpTextArea.setEditable(false);
		frmTheExplorationOfMAN.getContentPane().add(helpTextArea, "cell 3 2,grow");
		
		//##############################################################################
		//Controllers defined below here.
		//##############################################################################
		
		/**
		 * listAdapter:
		 * Class which controls both the helpText area and listOne based on selection.
		 */
		class listAdapter extends MouseAdapter {
			
			JList<String> listOneRef;
			JTextArea helpTextAreaRef;
			
			/**
			 * @param listOneRef
			 * A reference to the list this list controls.
			 * 
			 * @param helpTextAreaRef
			 * A reference to the helpTextDisplay.
			 */
			listAdapter(JList<String> listOneRef, JTextArea helpTextAreaRef) {
				this.listOneRef = listOneRef;
				this.helpTextAreaRef = helpTextAreaRef;
			}
			
			public void mouseReleased(MouseEvent e) {
				//Fist open up the help doc corresponding to this selection.
				JList<String> list = (JList<String>) e.getSource();
				helpTextAreaRef.setText(list.getSelectedValue());
				
				//Then Update listOne to contain commands relevant to the selected topic.
				listOneRef.setListData(new String[0]);
			}
		}
		
		/**
		 * listOneAdapter:
		 * Class which  is controlled by the top level list, still 
		 * controls the helpText area based on selection.
		 */
		class listOneAdapter extends MouseAdapter {
			
			JTextArea helpTextAreaRef;
			
			/**
			 * @param helpTextAreaRef
			 * A reference to the helpTextDisplay.
			 */
			listOneAdapter(JTextArea helpTextAreaRef) {
				this.helpTextAreaRef = helpTextAreaRef;
			}
			 
			public void mouseReleased(MouseEvent e) {
				JList<String> list = (JList<String>) e.getSource();
				System.out.println(list.getSelectedValue());
			}
		}
		
		//add listeners to their respective lists.
		categoryList.addMouseListener(new listAdapter(cmdList, helpTextArea));
		cmdList.addMouseListener(new listOneAdapter(helpTextArea));
	}

}
