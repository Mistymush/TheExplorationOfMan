/**
 * @author August Beers
 * 
 * I used window builder to layout my interface and then refactored 
 * the code generated by this tool to be more readable.
 * 
 * I also used the Java API. Some pages included:
 * https://docs.oracle.com/javase/7/docs/api/javax/swing/JList.html
 * https://docs.oracle.com/javase/7/docs/api/java/awt/event/MouseAdapter.html
 */

import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JLabel;
import java.awt.BorderLayout;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import javax.swing.JTextField;
import javax.swing.ListModel;
import javax.xml.parsers.ParserConfigurationException;

import org.xml.sax.SAXException;

import java.awt.Insets;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;

import net.miginfocom.swing.MigLayout;
import javax.swing.JButton;
import javax.swing.JList;
import javax.swing.AbstractListModel;
import javax.swing.JTextArea;

public class TheExplorationOfMAN {

	private JFrame frmTheExplorationOfMAN;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					TheExplorationOfMAN window = new TheExplorationOfMAN();
					window.frmTheExplorationOfMAN.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public TheExplorationOfMAN() {
		
		//First try and read in the data into a now XMLStateObject
		XMLParser parser = new XMLParser();
		XMLState state = null;
		try {
			state = parser.readMANData("MANdata.xml");
		} catch (ParserConfigurationException | SAXException | IOException e) {
			System.out.println("Failed to read data");
			e.printStackTrace();
			System.exit(0);
		}
		
		//System.out.println(state.getCategorieCommands("System"));
		
		//System.exit(0);
		
		initialize(state);
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize(XMLState state) {
		
		/**
		 * Create a JFrame to hold the GUI.
		 */
		frmTheExplorationOfMAN = new JFrame();
		frmTheExplorationOfMAN.setTitle("The Exploration of MAN: A Linux Help System");
		frmTheExplorationOfMAN.setBounds(100, 100, 600, 600);
		frmTheExplorationOfMAN.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frmTheExplorationOfMAN.getContentPane().setLayout(new MigLayout("", "[83.00][][33][grow]", "[][][grow]"));
		
		/**
		 * Non Functional Search Field and Search button.
		 */
		JTextField searchField = new JTextField();
		frmTheExplorationOfMAN.getContentPane().add(searchField, "flowx,cell 0 0,alignx left");
		searchField.setColumns(10);
		
		JButton btnSearch = new JButton("Search");
		frmTheExplorationOfMAN.getContentPane().add(btnSearch, "cell 1 0");
		
		/**
		 * Non Functional Buttons for back and forward (undo/redo)
		 */
		JButton btnBack = new JButton("Back");
		frmTheExplorationOfMAN.getContentPane().add(btnBack, "flowx,cell 3 1");
		
		JButton btnForward = new JButton("Forward");
		frmTheExplorationOfMAN.getContentPane().add(btnForward, "cell 3 1");
		
		/**
		 * list Labels.
		 */
		JLabel lblContents = new JLabel("Contents:");
		frmTheExplorationOfMAN.getContentPane().add(lblContents, "flowx,cell 0 1,growx");
		
		JLabel lblCommands = new JLabel("Commands:");
		frmTheExplorationOfMAN.getContentPane().add(lblCommands, "cell 1 1,growx");
		
		/**
		 * listModel
		 * Class which defines the state of the lists in the interface.
		 *
		 */
		class listModel extends AbstractListModel<String>{
			String[] values;
			
			listModel(String[] values){
				this.values = values;
			}
			
			@Override
			public String getElementAt(int index) {
				return values[index];
			}

			@Override
			public int getSize() {
				return values.length;
			}
		}
		
		/**
		 * categoryList
		 * Represents the top level of the help hierarchy, containing categories of commands.
		 */
		JList<String> categoryList = new JList<String>();
		categoryList.setModel(new listModel(state.getCategories()));
		frmTheExplorationOfMAN.getContentPane().add(categoryList, "flowx,cell 0 2,grow");
		
		/**
		 * cmdList
		 * Represents the second level of the help hierarchy, containing actual commands.
		 */
		JList<String> cmdList = new JList<String>();
		cmdList.setModel(new listModel(new String[0]));
		frmTheExplorationOfMAN.getContentPane().add(cmdList, "cell 1 2,grow");
		
		/**
		 * helpTextArea
		 * Text Area to display XML help data.
		 */
		JTextArea helpTextArea = new JTextArea();
		helpTextArea.setText("Welcome to the exploration of MAN \nSelect one of the categories listed on the left to begin!");
		helpTextArea.setEditable(false);
		frmTheExplorationOfMAN.getContentPane().add(helpTextArea, "cell 3 2,grow");
		
		//##############################################################################
		//Controllers defined below here.
		//##############################################################################
		
		/**
		 * CatagoryListAdapter:
		 * Class which controls both the helpText area and listOne based on selection.
		 */
		class CatagoryListAdapter extends MouseAdapter {
			
			JList<String> cmdListRef;
			JTextArea helpTextAreaRef;
			XMLState state;
			
			/**
			 * @param listOneRef
			 * A reference to the list this list controls.
			 * 
			 * @param helpTextAreaRef
			 * A reference to the helpTextDisplay.
			 */
			CatagoryListAdapter(JList<String> cmdListRef, JTextArea helpTextAreaRef, XMLState state) {
				this.cmdListRef = cmdListRef;
				this.helpTextAreaRef = helpTextAreaRef;
				this.state = state;
			}
			
			public void mouseReleased(MouseEvent e) {
				//Fist open up the help doc corresponding to this selection.
				JList<String> list = (JList<String>) e.getSource();
				
				String selected_category = list.getSelectedValue();
				
				helpTextAreaRef.setText(state.getCategoryByName(selected_category).getBody());
				
				//Then Update listOne to contain commands relevant to the selected topic.
				cmdListRef.setListData(state.getCategorieCommands(selected_category));
			}
		}
		
		/**
		 * CMDListOneAdapter:
		 * Class which  is controlled by the top level list, still 
		 * controls the helpText area based on selection.
		 */
		class CMDListOneAdapter extends MouseAdapter {
			
			JTextArea helpTextAreaRef;
			XMLState state;
			
			/**
			 * @param helpTextAreaRef
			 * A reference to the helpTextDisplay.
			 */
			CMDListOneAdapter(JTextArea helpTextAreaRef, XMLState state) {
				this.helpTextAreaRef = helpTextAreaRef;
				this.state = state;
			}
			 
			public void mouseReleased(MouseEvent e) {
				JList<String> list = (JList<String>) e.getSource();
				
				helpTextAreaRef.setText(state.getCommandByName(list.getSelectedValue()).getBody());
			}
		}
		
		//add listeners to their respective lists.
		categoryList.addMouseListener(new CatagoryListAdapter(cmdList, helpTextArea, state));
		cmdList.addMouseListener(new CMDListOneAdapter(helpTextArea, state));
	}

}
